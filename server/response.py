"""
Response to server

Mainly contains an HTTP Response class,
which is used to make an HTTP response packet
based on the specified response code and data.
"""

from . import errors
from . import consts
from . import settings


class Response:
    """
    Wrap an HTTP Response packet based on
    the return value generated by the Application layer.
    Requires WSGI standard server to pass in an
    Environ parameter for package generation.
    """

    def __init__(self, code: int, data='', environ=None, headers=None,
                 content_type=settings.DEFAULT_RESPONSE_CONTENT_TYPE):
        """
        Initialize a Response object.

        Parameters:
            code: int - HTTP Response code
            data: str - HTTP Response data
            environ: dict - WSGI Environ dict
            headers: Optional[dict] - Extra header information
            content_type: Optional[str] - Return type description
        """
        self.code = code
        self.data = data
        self._extra_hedaers = headers
        self._content_type = content_type

        # Try to catch environ method
        self._environ_method = None
        if environ:
            self._environ_method = environ.method

        # Make sure there's no sth weird send to client
        if not code in consts.HTTP_RESPONSE_DESCRIPTIONS.keys():
            raise errors.InvalidHTTPResponseCode(code)

        self._exception_data()

    def _make_baseline(self):
        """
        Make the first line of the HTTP response.
        Something like: "HTTP/1.1 200 OK"
        """
        desc = consts.HTTP_RESPONSE_DESCRIPTIONS[self.code]
        return ' '.join((settings.HTTP_VERSION, str(self.code), desc)) + "\r\n"

    @staticmethod
    def header_maker(headers):
        """
        Combine the incoming dictionary into
        a valid HTTP response header:

        headers = {
            "Server": "Simple-Python-HTTP-Server",
            "Content-Type": "text/plain",
            "Content-Length": 37
        } -> 
        HTTP/1.1 200 OK<CR>
        Server: Simple-Python-HTTP-Server<CR>
        Content-Type: text/plain<CR>
        Content-Length: 37<CR>
        <CR>        

        Parameters:
            headers: dict - HTTP Response headers
        Usage:
            header_make(headers:dict) -> str
        """
        combined = list()
        for key, value in headers.items():
            combined.append(str(key) + ": " + str(value))
        return "\r\n".join(combined) + '\r\n'

    def _exception_data(self):
        """
        If self.code is not in normal range,
        and there's no data provided,
        choose a data in config file
        """
        if 400 <= self.code <= 599 and not self.data:
            self.data = settings.ERROR_RESPONSE_BODY.get(self.code, '')

    def done(self):
        """
        Form a complete HTTP Response package:

        HTTP/1.1 200 OK<CR>
        Server: Simple-Python-HTTP-Server<CR>
        Content-Type: text/plain<CR>
        Content-Length: 37<CR>
        <CR>
        {body}...

        if environ.method is HEAD - the {body} part
        will not be addin.
        """
        baseline = self._make_baseline()
        headers = {
            "Server": settings.SERVER_NAME,
            "Content-Type": self._content_type,
            "Content-Length": len(self.data)}

        if self._extra_hedaers:
            headers.update(self._extra_hedaers)

        if self._environ_method == "HEAD":
            headers.update({"Content-Length": 0})

        response = baseline + self.header_maker(headers)
        if not self._environ_method == "HEAD":
            response += "\r\n" + self.data
        return response.encode()
